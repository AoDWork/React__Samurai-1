    //============================================  React Samurai 1.0   ===========================================================
    
    /* После прохождения курса автор общает знания реакта для позиции солидного джуна, слудеющий курс 2.0 сделает нас солидным
                мидлом, но это уже после того как произойдет трудоустройство. Курс находится на ютубе по ссылке
                        https://courses.prometheus.org.ua/courses/course-v1:LITS+114+2022_T2/about                       */


    
{/*    ====    01. Как проходить курс     ====

    Изучаем react + Redux потому что это самая популярная связка для трудоустройства(на 2020 год).


    На верстку забиваем, вестаем - "абы було", в уроках изобретамем свой redux(24-41) потом изучаем обычный(42), также изобретам свой
        connect(43-44) в redux, потом смотрим редаксовский(45). Делается это для того что бы знать как все происходит внутри, не 
        абстрагируясь от сложных вещей JS.

        44 - просто ознакомиться что он есть, не записывая, держать в голове что connect работает через contexy API и забить.

        Начиная с connect - так как оно должно быть в продакшене.
    
        Взаимодействие с сервером бесплатное до какого то лимита. Что бы было безлим нужно кинуть копеечку автору. Решение некторых
            трудностей с запросами есть на сайте на который делаем запросы.

        53 - классовые компоненты. В 2020м стало возможно пользоваться хуками, но тогда еще на них все не перешли потому что прогеры
            очень инертны, также будем это учить потому что в Angular классовые компоненты и нужно это понимать.
        
        82 - селекторы не раскрыта полностью тема. Более лучше будет раскрыта в путь самурая 2.0.

        95 - делаем свой пейджинатор, а не используем готовый в учебных целях.


    Ведем конспект.


    Работаем в VSCode или Web Shtorme.


    Каждую неделю пересматриваем 100 урок, для визуализации полной картины что мы будем учить в целом и где находимся сейчас, а также
        для запоминания терминов.
     

    После прохождения курса обязательно идем на собеседования, 4 проваливаем на 5м устраиваемся на работу. После каждого собеседования
        составляем список вопросов на которые на смог ответить и учить их.
    
*/}


{/*    ====    02. Для чего Nodejs фронтенду     ====

    Изначально JS был создан для того чтобы выполнятся в браузере и делать какие то действия с хтмл + ксс, теперь оно так и осталось.


    Позже для работы с файловой системой компьютера и базами данных была создана программа Nodejs. Код для Nodejs также пишеться на
        JS передается в Nodejs и там выполняется(при выполнении в Nodejs код не имеет доступа к сайтам, а в браузере наоборот - 
        имеет доступ к сайтам но не может работать с файловой системой компьютера и программами). 

        И гугл хром и Nodejs используют движок V8, браузер дополняет V8 своими компонентами API(например хтмл элементы, ДОМ модель,
        события), а программа написаная для Nodejs взаимодействует с ОС(программы, девайсы(вебка, микрофон)), файловой системой, 
        базой данных. И браузер и Nodejs понимает, интерпретирует+ компилирует JS.

    
    Для чего Nodejs(программа, платформа в которой выполняетс JS код) нужен фронтенд разработчику: работа с файловой системой, 
        базой данных, Nodejs можно установить в микроконтроллер и написать код на JS чтобы например обслаживать холодильник(показ
        температуры, сигнал когда открыта дверь).

        Для удобства разработки(автоматизации процесса) - мы пишем код для браузера, потом готовим его для загрузки в браузер:
        компилируем (например из sass в css), бандлы создаем, склеиваем все JS файлы, минифицируем их, склеиваем картинки в спрайты.
        То есть перед отправкой программы в браузер мы делаем много дополнительных задач. Также для удобства разработки хотим чтобы
        не сохранять код постоянно, а в браузере делать оьновление страницы, а чтобы это было автоматически. Сегодня мы даже можем
        писать на другом языке который превращается в JS код и потом запускается в браузере(например в React пишем на языке JSX
        который должен превратиться в понятный браузеру язык). 
        
        Для того чтобы у всей комманды был одинаковый процесс всего этого нужно использовать сторонние программы(модули, пакеты)
        которые написаны для Nodejs(на JS) и выполняются в нем, и через его менеджер пакетов(npm) можно их загружать и 
        устанавливать(удалять). NPM - как каталог который контролирует какие модули у него уже есть. Потом можно настроить эти 
        модули так чтобы все выполнялось автоматически. А NPX - менеджер для запуска этих модулей. Получается что в рабочей папке
        кроме JS кода лежат еше програмки которые наш код в нужный момент времени преобразуют, минифицируют, компилируют, проверяют
        на ошибки и т.д.

        
    Серверным JS Nodejs называют потому что одной из программ которую можно написать для Nodejs это программа которая будет хендлить
        аштитипи запросы (handle HTTP request) - она принимает хттп запросы от клиента(браузер) формировать респонс(ответ) и
        возвращать ответ. То есть мы можем написать программу которая и будет програмным ХТТП сервером и будет работать внутри
        Nodejs. На сегодня это самая популярная задача для которой используется Nodejs.
 
*/}


{/*    ====    03. Установка Nodejs    ====

    Заходим на сайт Nodejs и скачиваем последнюю версию(ОС определяется автоматически). Устанавливаем. Проверим чтобы значек нода
        был в установленных программах.

    Лучше использовать английскую виндоус, ну в крайнем случае не называть рабочие папки на русском языке и с пробелами и не делать 
        в имени пользователя виндовс пробелов и писать тоже на английском языке. Вместо пробелов используем дефисы - . Точку в этих
        названиях тоже лучше не ставить, используем или дефис или нижнее подчеркивание.

*/}


{/*    ====    04. Create-react-app    ====

    Теперь будем устанавливать и запускать React приложение. 
    

    Реакт создали программеры из Фейсбука и его там используют. Загуглим Create-react-app - первая ссылка ведет на GitHub, перейдя
        туда видим что это некий проект. Все модули написанные под Nodejs лежат на GitHub имеют открытый код и под той или иной
        лицензией могут использоваться для своих нужд.

    Create-react-app - это такая же программа.  С помощью NPX(надстройка над npm) мы ее запустим и эта программа установит в нашу
        рабочую папку кучу всего, потянет за собой кучу пакетов, всё настроит, подготовит, а нам останется только запустить.


        
    Ниже на GitHub этого проекта Create-react-app есть инструкция - Quick Overview. Есть 3 комманды которые нужно написать в 
        Node.js command prompt - это консольная программка(найти ее можно через поиск в пуске, она установилась вместе с Nodejs).


        Запускаем эту консольную программу, по умолчанию у автора она открылась по пути C:\Users\notePad.by, поэтому нужно перейти
        в папку где у нас будет проект например D:\React-Samurai\Project-1. Сначала выберем нужный диск где лежит папка с проектом, 
        для этого просто напишем D: и нажмем ентер, нас кинет на диск Д. Потом нужно прописать cd - change directory, а дальше 
        остальной путь к папке cd React-Samurai\Project-1 - жмем ентер и перешли в рабочую папку в этом консольном окне(при вводе
        названия папки можно нажимать tab и если такая папка есть в этой директории допишет полное ее имя, или можно просто
        скопировать путь из папки в виндовсе и вставить в консоль; чтобы подняться на папку выше cd .. (cd и двоеточие через пробел))

        Написать следующие строки можно и в терминале VScode. Открыв как open folder - рабочую папку Project-1, и перейдя в нее
        способом выше(если по умолчанию не перешло) в терминале VScode(сверху вкладка New terminal чтобы его открыть).



    Теперь находясь в консоли в рабочей папке проекта пишем эти консольные команды:

        npx create-react-app my-app  (my-app - название проекта, можно писать своё) - так как мы пишем npx то кроме установки
                                        всех необъодимых модулей произойдет еще и их настройка. Жмем ентер. 
                                        
        Создается папка с названием проекта в данном случае my-app и в нее будет происходить загрузка модулей. В файле
        package.json - храниться информация об этой папке проекта как о проекте(модуле, таком же как мы устанавливаем), чтобы
        можно было его запустить в Nodejs.

        Появилась папка node_modules - каждый проект который мы устанавливаем через npm содержит такую папку, в нее сохраняются
        все пакеты(модули которые нужны нам для работы react-app)


        Установка завершилась. Видим комманды которые можно написать в середине директории(папки) my-app:
            npm start       - starts the development server

            npm run build   - bundle the app into static files for production

            npm test        - starts the test runner

            npm run eject   - removes this tool and copies build dependencies, configuration files and scripts into the app
                                directory. If you do this, you can't go back!

            
        Рекомендуют начать с перехода в папку проекта(пакета/модуля потому что для запуска нужен файл package.json) и запуска его
        через нпм:
            cd my-app
            npm start

        Видим что нпм запустил локальный сервер(он умеет принимать хттп запросы и отправлять на них респонсы), он будет отдавать нам
            наш index.html и именно в нем будет вестись наша разработка сингл пейдж аппликейшена (single page application - spa)

*/}


{/*    ====    05. Single page application - spa    ====

    Spa - одностраничное приложение.


    Очень давно жизненный цикл страницы бал такой. Traditional Page Lifecycle. Например для личных сообщений.
    При заходе на страницу бразер посылал запрос серверу(Initial request), и он в ответ присылал хтмл файл. Потом когда мы обновляли
        сайт чтобы посмотреть появилось ли например новое сообщение на форуме, браузер делал снова запрос(Form POST) - и сервер снова
        присылал этот же хтмл полностью если там не было изменений или совсем немного измененный если там были какие-то изменения, а
        браузер перезагружал полсностью страницу чтобы получить свежую версию хтмл.

                        Initial request
                        ------------------------->

                        <------HTML----JS---------
            CLIENT      Form POST                     SERVER
                        ------------------------->

            reload       <------HTML---------------


        При этом пакет ХТМЛ был большой, а следом за ним шел файл с JS очень небольшой. Сообщения раньше были сгенерированы(зашиты)
        уже в ХТМЛ как теги.

    
    Spa - загружают страницу единожды. Файл ХТМЛ приходит почти пустой, а следом большой файл JS который уже отрисовывает весь сайт.
        
                        Initial request
                        ------------------------->

                        <------HTML----JS---------
            CLIENT      AJAX                          SERVER
                        ------------------------->

                        <------JSON---------------

        Теперь сообщения могут храниться или в файле JS(очень редко), но чаще всего после получения этих файлов браузер делает
        Ajax запрос на сервер, а тот возвращает json данные(все сообщения которые есть), а JS который ранее загрузился в браузер
        берет эти данные и без перезагрузки страницы генерирует на ходу ХТМЛ. При этом для того чтобы посмотреть есть ли новые
        сообщения не нужно перезагружать страницу, а в JS есть код который время от времени опрашивает сервер и если появилось
        новое сообщение, то присылается это одно сообщение(JSON файл с сообщениями???) и под это новое сообщение на сайте 
        генерируется новый хтмл тег. При таком подходе очень разгружается сервер, экономиться много траффика, ускоряется работа
        сайта.

        При Traditional Page Lifecycle для каждой страницы, например настройки или новостная лента или моя стена, для каждой такой
        страницы был отдельный адресс и по этому адресу загружалась хтмл страница. В Spa - всегда одна страница, не нужно путать с
        лендингом, в spa мало ХТМЛ(полупустой файл) + много JS скрипта который создает динамически нужную разметку, в том числе
        не только когда мы находимся на одной странице(например - сообщения) но и когда мы кликаем на ссылку перехода на другую
        страницу этого же сайта, адрес url меняется, но фактически на сервер не идет запрос на новый хтмл, а JS перехватывает
        изменение этого url делает нужный ajax запрос на сервак - для отображения новой страницы, возвращается json и наш JS
        вытирает(удаляет) страницу "сообщения" (хтмл контент) и рисует контент для новой страницы. Если некоторые элементы на
        этих страницах одинаковые, например хедер, футер, aside то они не перерисовываются. React, angular работают по этой же
        схеме. Получается что страница генерируется на стороне клиента, разгружая сервер, и сервер по сути выступает теперь в роли
        API(эй пи ай).

        При старом формате когда сервер работал с веб страницей он работал только с ХТМЛ, а теперь когда он работает со spa, а 
        это уже как полноценная программа - веб приложение с большим кодом логики, для которого теперь нужно с основном json файлы.
        Так как json формат универсальный то при запросе таких данных сервер может отдавать json как в веб приложение(spa) так и
        в мобильное приложение, хотя там другой UI(user interface - ю ай), просто по другому эти данные обрабатываются и по другому 
        рисуется интерфейс, при этом сервер становиться универсальным.

*/}